     1: // Rehaga el ejercicio anterior conservando la misma funcionalidad pero modificando la 
     2: // implementación. Utilice el módulo del Timer0 con el prescaler para controlar el tiempo 
     3: // de espera y la interrupción para controlar el estado de los leds.
     4: 
     5: #include <htc.h>
     6: 
     7: // constante requerida para funciones
     8: // de espera de tiempo
     9: #define _XTAL_FREQ 1000000 //1MHz oscilador interno
    10: 
    11: int flag1 = 0;
    12: int contador = 0;
    13: 
    14: void main(){
    15:     //OPTION_REG = [-,-,T0CS,T0SE,PSA,PS2,PS1,PS0]
    16:     T0CS = 0; //-> Bit de selección de reloj para incremento (TMR0ClockSourceSelect):
    17:                 // 1 = reloj externo conectado a pin T0CKI (en este caso no importa el valor de T0SE)
    18:                 // 0 = reloj interno asociado al ciclo de instrucción.
    19:     T0SE = 0; //-> Bit de selección de flanco de transición (TMR0SourceEdgeSelect), 
    20:                 //solo tiene sentido cuando la fuente es reloj externo (T0CS=1)
    21:                 //1 = Incrementa en transición alto-bajo del pin T0CKI.
    22:                 //0 = Incrementa en transición bajo-alto del pin T0CKI.
    23:     PSA = 0; //-> Prescaler asignado a Timer0:
    24:                 //1 = Prescaler asignado a Temporizador Watchdog
    25:                 //0 = Prescaler asignado a módulo del Timer0. 
    26:     PS2= 0;
    27:     PS1= 0;
    28:     PS0= 0;// -> PS2-PS0=0 -> Prescaler 1:2 = 1:2^(1+1)
    29:     //OPTION_REG = 0b00000000; //valor final de OPTION_REG
    30: 
    31:     //INTCON = [GIE,PEIE,T0IE,INTE,RBIE,T0IF,INTF,RBIF]
    32:     GIE = 1; //-> Habilitar interrupciones generales (GlobalInterruptEnable): 
    33:             // 1 = Habilitar interrupciones generales
    34:             // 0 = Deshabilitar interrupciones generales
    35: 
    36:     //PEIE = 0; //-> Habilitar interrupciones de periféricos
    37:             // 1 = Habilitar interrupciones de periféricos
    38:             // 0 = Deshabilitar interrupciones de periféricos //POR COPILOT
    39: 
    40:     T0IE = 1; //-> Habilitación de interrupción por desborde del Timer0 (TMR0OverflowInterruptEnable):
    41:             // 1 = Habilitar interrupción por desborde del Timer0
    42:             // 0 = Deshabilitar interrupción por desborde del Timer0
    43: 
    44:     //INTE = 0; //-> Habilitación de interrupción por cambio en RB0/INT (ExternalInterruptEnable):
    45:             // 1 = Habilitar interrupción por cambio en RB0/INT
    46:             // 0 = Deshabilitar interrupción por cambio en RB0/INT //POR COPILOT
    47: 
    48:     //RBIE = 0; //-> Habilitación de interrupción por cambio en RB4-RB7 (RBPortChangeInterruptEnable):
    49:             // 1 = Habilitar interrupción por cambio en RB4-RB7
    50:             // 0 = Deshabilitar interrupción por cambio en RB4-RB7 //POR COPILOT
    51: 
    52:     //T0IF = 0; //-> Bandera de desborde del Timer0 (TMR0OverflowInterruptFlag):
    53:             // 1 = El registro TMR0 ha desbordado (requiere limpiado por soft).
    54:             // 0 = El registro TMR0 no ha desbordado
    55: 
    56:     //INTF = 0; //-> Bandera de interrupción por cambio en RB0/INT (ExternalInterruptFlag):
    57:             // 1 = Cambio en RB0/INT
    58:             // 0 = No ha ocurrido cambio en RB0/INT //POR COPILOT
    59: 
    60:     //RBIF = 0; //-> Bandera de interrupción por cambio en RB4-RB7 (RBPortChangeInterruptFlag):
    61:             // 1 = Cambio en RB4-RB7
    62:             // 0 = No ha ocurrido cambio en RB4-RB7 //POR COPILOT
    63:     //INTCON = 0b10100000; //valor final de INTCON (alternativo a las asignaciones anteriores)
    64: 
    65:     //Velocidad Clock interno = 1MHz, ciclo de instrucción = 4 ciclos de reloj -> 250KHz -> 4us
    66:     //Si por ejemplo Prescaler 1:2 -> 4us * 2 = 8us.
    67:     //TMR0 = 256 - 131 = 125 --> Inicializo TMR0 en 131 para que desborde con 125 ciclos: 125 * 8us = 1ms
    68:     //Cada 1ms se desborda el Timer0 y se llama a interrupcion
    69:     //Si quiero que el desborde sea cada 250ms -> 250ms / 1ms = 250 -> 250 desbordes
    70:     //1ms * 250 = 250ms 
    71: 
    72:     //PORTB = [RB7,RB6,RB5,RB4,RB3,RB2,RB1,RB0]
    73:     //TRISB = [TRISB7,TRISB6,TRISB5,TRISB4,TRISB3,TRISB2,TRISB1,TRISB0]
    74:     //PORTA = [-,-,RA5,RA4,RA3,RA2,RA1,RA0]
    75:     //TRISA = [-,-,TRISA5,TRISA4,TRISA3,TRISA2,TRISA1,TRISA0]
    76:     TRISB = 0b11101111; //registro PORTB(RB4) como salida
    77:     TRISA = 0b00000011; //registro PORTA(RA0,RA1) como entrada
    78: 
    79:     while(1) {
    80:         // Esperar hasta que se presione alguno de los pulsadores
    81:         TMR0 = 131; // Reiniciar Timer0 para que no se active la interrupción hasta oprimir
    82:         if (RA0 == 0 || RA1 == 0) {
    83:             // Comenzar a titilar los LEDs de manera alternada cada 250 ms
    84:                 while(1) {
    85:                         if (flag1 == 1) {
    86:                             PORTB = PORTB ^ 0b00010000; // Alternar los LEDs RB4 y RB5
    87:                             flag1 = 0;
    88:                         }
    89:                 }
    90:         }
    91:     }
    92: }
    93: 
    94: void interrupt isr(void) {
    95:         GIE = 0; //deshabilito interrupciones
    96:         if (T0IF) { // Verificar si la interrupción es por desbordamiento del Timer0
    97:                  T0IF = 0; // Limpiar el flag de interrupción del Timer0
    98:                  TMR0 = 141; // reiniciar contador registro timer0
    99:                 if (++contador == 250){
   100:                         flag1=1;
   101:                         contador = 0;
   102:                         //PORTB = PORTB ^ 0b00010000; // Cambiar estado de RB4 y RB5
   103:                 }
   104:         }
   105:         GIE = 1; //habilito interrupciones
   106:         
   107: }